# ============================================================================
# kiro2api 环境配置文件示例
# ============================================================================
# 复制此文件为 .env 并根据需要修改配置

# ============================================================================
# Token管理配置（两种方式，选择其一）
# ============================================================================

# 方式一：JSON配置（推荐）- 支持多认证方式和多token
# 详细配置示例请参考：config-examples/kiro_auth_token_examples.md

# 单个 Social 认证示例：
# KIRO_AUTH_TOKEN='[{"auth":"Social","refreshToken":"your_social_refresh_token_here"}]'

# 单个 IdC 认证示例：
# KIRO_AUTH_TOKEN='[{"auth":"IdC","refreshToken":"your_idc_refresh_token_here","clientId":"your_idc_client_id","clientSecret":"your_idc_client_secret"}]'

# 多个认证混合示例（推荐生产环境）：
# KIRO_AUTH_TOKEN='[
#   {
#     "auth": "Social",
#     "refreshToken": "social_token_1_here"
#   },
#   {
#     "auth": "Social", 
#     "refreshToken": "social_token_2_here"
#   },
#   {
#     "auth": "IdC",
#     "refreshToken": "idc_refresh_token_here",
#     "clientId": "idc_client_id_here",
#     "clientSecret": "idc_client_secret_here"
#   }
# ]'

# 方式二：传统环境变量配置（向后兼容）
# ============================================================================

# 认证方式选择（仅传统配置时使用）
# 可选值：social(默认) 或 idc
AUTH_METHOD=social

# Social认证方式（默认）
# 支持逗号分隔的多token: token1,token2,token3
AWS_REFRESHTOKEN=your_refresh_token_here

# IdC认证方式（当AUTH_METHOD=idc时必需）
# 支持逗号分隔的多token: token1,token2,token3
# IDC_REFRESH_TOKEN=your_idc_refresh_token_here
# IDC_CLIENT_ID=your_idc_client_id_here
# IDC_CLIENT_SECRET=your_idc_client_secret_here

# ============================================================================
# Token管理高级配置
# ============================================================================

# Token使用监控
# USAGE_CHECK_INTERVAL=5m                 # 使用状态检查间隔
# TOKEN_USAGE_THRESHOLD=5                 # 可用次数预警阈值

# Token选择策略
# TOKEN_SELECTION_STRATEGY=balanced       # optimal(最优使用) 或 balanced(均衡使用)

# 缓存性能配置
# CACHE_CLEANUP_INTERVAL=5m               # 缓存清理间隔
# TOKEN_CACHE_HOT_THRESHOLD=10            # 热点缓存阈值
# TOKEN_REFRESH_TIMEOUT=30s               # Token刷新超时时间

# ============================================================================
# 基础服务配置
# ============================================================================

# 服务端口 (默认: 8080)
PORT=8080

# API认证密钥 (默认: 123456)
KIRO_CLIENT_TOKEN=123456

# Gin运行模式: debug, release, test
GIN_MODE=release

# ============================================================================
# 日志配置
# ============================================================================

# 日志级别: debug, info, warn, error
LOG_LEVEL=info

# 日志格式: text, json
LOG_FORMAT=json

# 日志文件路径（可选，不设置则不写入文件）
# LOG_FILE=/var/log/kiro2api.log

# 控制台输出开关（默认: true）
# LOG_CONSOLE=true

# ============================================================================
# 超时配置
# ============================================================================

# HTTP客户端请求超时配置（分钟）
# REQUEST_TIMEOUT_MINUTES=15              # 复杂请求超时 (默认: 15分钟)
# SIMPLE_REQUEST_TIMEOUT_MINUTES=2        # 简单请求超时 (默认: 2分钟)

# HTTP服务器超时配置（分钟）
# SERVER_READ_TIMEOUT_MINUTES=16          # 服务器读取超时 (默认: 16分钟)
# SERVER_WRITE_TIMEOUT_MINUTES=16         # 服务器写入超时 (默认: 16分钟)

# 流式响应配置
# DISABLE_STREAM=false                    # 是否禁用流式响应 (默认: false)

# ============================================================================
# 配置说明
# ============================================================================
#
# JSON配置示例（推荐使用）：
# KIRO_AUTH_TOKEN='[
#   {
#     "auth": "Social",
#     "refreshToken": "arn:aws:sso:us-east-1:999999999999:token/refresh/xxx"
#   },
#   {
#     "auth": "IdC",
#     "refreshToken": "arn:aws:identitycenter::us-east-1:999999999999:account/instance/xxx",
#     "clientId": "https://oidc.us-east-1.amazonaws.com/clients/xxx",
#     "clientSecret": "xxx-secret-key-xxx"
#   }
# ]'
#
# Token获取方式：
# - Social tokens: 通常在 ~/.aws/sso/cache/kiro-auth-token.json
# - IdC tokens: 在 ~/.aws/sso/cache/ 目录下的相关JSON文件中
#
# 性能调优建议：
# - 生产环境使用 GIN_MODE=release
# - 高并发场景调整 TOKEN_CACHE_HOT_THRESHOLD
# - 根据API使用频率调整 TOKEN_SELECTION_STRATEGY
#
# 故障排除：
# - 启用 LOG_LEVEL=debug 查看详细日志
# - 检查 token 是否过期和使用限制
# - 验证JSON格式的正确性