# ============================================================================
# kiro2api 环境配置文件示例
# ============================================================================
# 复制此文件为 .env 并根据需要修改配置

# ============================================================================
# Token管理配置（可选 - 推荐使用 Web Dashboard）
# ============================================================================
#
# 新功能：Web Dashboard
# ----------------------
# kiro2api 现在提供 Web Dashboard，您可以通过浏览器管理 Token，无需手动配置。
#
# 使用 Dashboard：
#   1. 启动服务：./kiro2api
#   2. 访问：http://localhost:8080/dashboard
#   3. 通过浏览器完成 OAuth 登录
#   4. Token 自动保存到 tokens/ 目录
#
# Dashboard 优势：
#   - 无需手动获取和配置 Token
#   - 支持多种认证提供商（BuilderId、Google、GitHub 等）
#   - 可视化 Token 管理（查看、刷新、删除）
#   - 支持远程部署（手动回调模式）
#
# 传统配置方式（仍然支持，向后兼容）
# ------------------------------------
# 如果您更喜欢传统的配置文件方式，可以继续使用 KIRO_AUTH_TOKEN。
#
# 使用JSON格式配置认证信息，支持多认证方式和多token
# 支持两种配置方式：
#   1. 直接配置JSON字符串（推荐用于简单配置）
#   2. 配置文件路径（推荐用于复杂配置或敏感信息管理）
#
# 基本格式：
# KIRO_AUTH_TOKEN='[认证配置对象数组]'
# 或
# KIRO_AUTH_TOKEN=/path/to/auth_config.json
#
# 每个认证配置对象包含：
# - auth: 认证方式，可选值为 "Social" 或 "IdC"
# - refreshToken: 刷新令牌（必需）
# - clientId: IdC认证的客户端ID（IdC认证时必需）
# - clientSecret: IdC认证的客户端密钥（IdC认证时必需）
# - disabled: 是否禁用此配置（可选，默认false）
# ============================================================================
# Token获取方式
# ============================================================================
#
# 方式1：使用 Web Dashboard（推荐）
#   访问 http://localhost:8080/dashboard 通过浏览器完成 OAuth 登录
#
# 方式2：手动配置（传统方式）
#   Social tokens:
#     通常位于 ~/.aws/sso/cache/ 目录下的JSON文件中
#     文件名类似：kiro-auth-token.json 或包含 "refreshToken" 字段的缓存文件
#
#   IdC tokens:
#     位于 ~/.aws/sso/cache/ 目录下的JSON文件中
#     需要同时提供 clientId 和 clientSecret
#
# 方式1：直接配置JSON字符串（可选）
# 示例1：单个 Social 认证
# KIRO_AUTH_TOKEN='[{"auth":"Social","refreshToken":"your_social_refresh_token_here"}]'

# 方式2：配置文件路径（系统会优先检查是否为文件）
# KIRO_AUTH_TOKEN=/path/to/auth_config.json
# KIRO_AUTH_TOKEN=./config/auth.json

# 示例2：单个 IdC 认证
# KIRO_AUTH_TOKEN='[{"auth":"IdC","refreshToken":"your_idc_refresh_token_here","clientId":"your_idc_client_id","clientSecret":"your_idc_client_secret"}]'

# 示例3：多个认证混合
# KIRO_AUTH_TOKEN='[
#   {
#     "auth": "Social",
#     "refreshToken": "aorAAAAAGj....."
#   },
#   {
#     "auth": "IdC",
#     "refreshToken": "aorAAAAAGj....",
#     "clientId": "uG-18bI....",
#     "clientSecret": "eyJraWQiOiJrZXktM....."
#   }
# ]'
# ============================================================================
# Token获取方式
# ============================================================================
#
# Social tokens:
#   通常位于 ~/.aws/sso/cache/ 目录下的JSON文件中
#   文件名类似：kiro-auth-token.json 或包含 "refreshToken" 字段的缓存文件
#
# IdC tokens:
#   位于 ~/.aws/sso/cache/ 目录下的JSON文件中
#   需要同时提供 clientId 和 clientSecret
#
# Token选择策略：
# - 系统使用"顺序选择"策略（sequential）
# - 按配置顺序依次使用token，当前token耗尽后自动切换到下一个
# - 支持多token自动负载均衡和容错

# ============================================================================
# Dashboard 配置
# ============================================================================

# Token 存储目录（可选，默认: ./tokens）
# Dashboard 通过 OAuth 登录获取的 Token 将保存到此目录
# KIRO_TOKENS_DIR=./tokens

# Token 加载优先级：
#   1. 环境变量 KIRO_AUTH_TOKEN（如果设置）
#   2. Token 文件目录 KIRO_TOKENS_DIR（默认 ./tokens）
#
# 说明：
#   - 如果设置了 KIRO_AUTH_TOKEN，将优先使用环境变量中的配置
#   - 如果未设置 KIRO_AUTH_TOKEN，将从 KIRO_TOKENS_DIR 加载 Token 文件
#   - Dashboard 保存的 Token 始终存储在 KIRO_TOKENS_DIR 目录中

# ============================================================================
# 基础服务配置
# ============================================================================

# 服务端口（默认: 8080）
PORT=8080

# API认证密钥（默认: 123456）
KIRO_CLIENT_TOKEN=123456

# Gin运行模式: debug, release, test（默认: release）
GIN_MODE=release

# ============================================================================
# 日志配置
# ============================================================================

# 日志级别: debug, info, warn, error（默认: info）
LOG_LEVEL=info

# 日志格式: text, json（默认: json）
LOG_FORMAT=json

# 日志文件路径（可选，不设置则只输出到控制台）
# LOG_FILE=/var/log/kiro2api.log

# 控制台输出开关（默认: true）
# LOG_CONSOLE=true

# ============================================================================
# 工具配置
# ============================================================================

# 工具描述的最大长度（字符数，默认: 10000）
# 用于限制 tool description 字段的长度，防止超长内容导致上游API错误
# MAX_TOOL_DESCRIPTION_LENGTH=10000

# ============================================================================
# 最佳实践
# ============================================================================
#
# 1. 生产环境配置：
#    - 使用 GIN_MODE=release
#    - 配置多个token实现负载均衡
#    - 设置 LOG_LEVEL=info 或 warn
#    - 启用日志文件记录: LOG_FILE=/var/log/kiro2api.log
#
# 2. 开发环境配置：
#    - 使用 GIN_MODE=debug
#    - 设置 LOG_LEVEL=debug
#    - 保持控制台输出: LOG_CONSOLE=true
#
# 3. 故障排除：
#    - 启用 LOG_LEVEL=debug 查看详细日志
#    - 检查token是否过期：查看日志中的"token刷新"相关信息
#    - 验证JSON格式：使用在线JSON验证器检查KIRO_AUTH_TOKEN格式
#    - 检查使用限制：日志会显示剩余可用次数
